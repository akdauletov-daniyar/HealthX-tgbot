from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart
import logging

from app.generators import gpt3_5

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

class Form(StatesGroup):
    symptoms = State()
    
    
@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    welcome_message = """üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —è - –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Health-X!
–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –¥–∏–∞–≥–Ω–æ–∑, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–∏—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö.

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –¥–∏–∞–≥–Ω–æ–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ —Å–∏–º–ø—Ç–æ–º—ã. –ù–∞–ø—Ä–∏–º–µ—Ä:
- –ö–∞–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ?
- –ö–∞–∫ –¥–∞–≤–Ω–æ —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è?
- –ï—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑–¥—Ä–∂–∏—Ç–µ–ª–∏?
- –ó–∞–º–µ—á–∞–ª–∏ –ª–∏ –≤—ã –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥—Ä—É–≥–∏–µ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–∏–º–ø—Ç–æ–º—ã?

–ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
    
    await message.answer(welcome_message)
    await state.clear()


@router.message(Form.symptoms)
async def process_symptoms(message: Message):
    try:
        await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        logger.info(f"Processing symptoms from user: {message.from_user.id}")
        
        response = await gpt3_5(message.text)
        if not response or not response.choices:
            raise Exception("No response received from OpenAI")
            
        await message.answer(response.choices[0].message.content)
        logger.info("Successfully sent response to user")
        
    except Exception as e:
        error_message = f"Error processing request: {str(e)}"
        logger.error(error_message)
        await message.answer(
            "–ü—Ä–∏–Ω–æ—à—É —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –Ω–æ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞."
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏."
            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
        )

@router.message(F.text)
async def process_text(message: Message, state: FSMContext):
    await state.set_state(Form.symptoms)
    await process_symptoms(message)

